<?php

namespace frontend\controllers;

use common\models\Currency;
use common\models\Promo;
use common\models\Travel;
use frontend\models\Searchs\TravelSearch;
use frontend\models\TravelStepForms\CalcForm;
use frontend\models\TravelStepForms\DonwloadPolicyForm;
use frontend\models\TravelStepForms\SetPromoForm;
use frontend\models\TravelStepForms\Step1Form;
use frontend\models\TravelStepForms\Step2Form;
use frontend\models\TravelStepForms\Step3Form;
use Yii;
use yii\filters\VerbFilter;
use yii\web\BadRequestHttpException;
use yii\web\NotFoundHttpException;

class TravelStepController extends BaseController
{
    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['Verbs'] = [
            'class' => VerbFilter::className(),
            'actions' => [
                'step1' => ['POST'],
                'step2' => ['PUT'],
                'set-promo' => ['PUT'],
                'remove-promo' => ['PUT'],
                'step3' => ['POST'],
            ]
        ];

        $behaviors['authenticator']['only'] = [
            "step2",
            "step3",
            "travels-of-user",
        ];

        return $behaviors;
    }

    /**
     * @OA\Get(
     *     path="/travel-step/countries",
     *     summary="Method to get all countries",
     *     tags={"TravelStepController"},
     *     @OA\Parameter (ref="#/components/parameters/language"),
     *     @OA\Response(
     *         response="200", description="countries",
     *          @OA\JsonContent(type="array", @OA\Items(type="object",
     *                @OA\Property(property="id", type="integer", example=9),
     *                @OA\Property(property="name", type="string", example="Эквадор"),
     *                @OA\Property(property="code", type="integer", example="EC"),
     *              ),
     *         )
     *     )
     * )
     */
    public function actionCountries()
    {
        return Travel::getCountriesArr();
    }

    /**
     * @OA\Get(
     *     path="/travel-step/purposes",
     *     summary="Method to get all purposes",
     *     tags={"TravelStepController"},
     *     @OA\Parameter (ref="#/components/parameters/language"),
     *     @OA\Response(
     *         response="200", description="purposes",
     *          @OA\JsonContent(type="array", @OA\Items(type="object",
     *                @OA\Property(property="id", type="integer", example=9),
     *                @OA\Property(property="name", type="string", example="Путешествие"),
     *              ),
     *         )
     *     )
     * )
     */
    public function actionPurposes()
    {
        return Travel::getPurposes();
    }

    /**
     * @OA\Get(
     *     path="/travel-step/days-interval",
     *     summary="Method to get days interval",
     *     tags={"TravelStepController"},
     *     @OA\Response(
     *         response="200", description="purposes",
     *          @OA\JsonContent(type="array", @OA\Items(type="integer", example="max:365"))
     *     )
     * )
     */
    public function actionDaysInterval()
    {
        return [
            'min' => Travel::MIN_DAYS,
            'max' => Travel::MAX_DAYS,
        ];
    }

    /**
     * @OA\Get(
     *     path="/travel-step/calc",
     *     summary="Method to get all purposes",
     *     tags={"TravelStepController"},
     *     @OA\Parameter (ref="#/components/parameters/language"),
     *     @OA\Parameter (name="country_codes[]", in="query", @OA\Schema (type="array",  @OA\Items(type="string", example="BE"))),
     *     @OA\Parameter (name="travel_purpose_id", in="query", required=true, @OA\Schema (type="integer"), example=1, description="should get select which is generated by /travel-step/purposes api"),
     *     @OA\Parameter (name="begin_date", in="query", required=true, @OA\Schema (type="string"), example="27.03.2023"),
     *     @OA\Parameter (name="end_date", in="query", required=true, @OA\Schema (type="string"), example="27.04.2023"),
     *     @OA\Parameter (name="has_covid", in="query", required=true, @OA\Schema (type="integer"), example="1"),
     *     @OA\Parameter (name="is_family", in="query", required=true, @OA\Schema (type="integer"), example="1"),
     *     @OA\Parameter (name="birthdays[]", in="query", @OA\Schema (type="array",  @OA\Items(type="string", example="25.10.1998"))),
     *     @OA\Response(
     *         response="200", description="programs",
     *          @OA\JsonContent(type="array", @OA\Items(type="object",
     *                  @OA\Property(property="amount_uzs", type="integer", example=136000),
     *                  @OA\Property(property="amount_usd", type="string", example=11.88),
     *                  @OA\Property(property="program_name", type="string", example="GRAND 2"),
     *                  @OA\Property(property="program_id", type="integer", example="EUR"),
     *                  @OA\Property(property="risks", type="array", @OA\Items(type="object",
     *                      @OA\Property(property="name", type="string", example="Медицинские услуги"),
     *                      @OA\Property(property="amount", type="integer", example=30000),
     *                    )
     *                  ),
     *                  @OA\Property(property="partner", type="object",
     *                      @OA\Property(property="id", type="integer", example=6),
     *                      @OA\Property(property="name", type="string", example="Gross Insurance"),
     *                      @OA\Property(property="image", type="string", example="https://staging-api.sugurtabozor.uz/uploads/partners/partner1598589214.png"),
     *                  ),
     *                 ),
     *              ),
     *            ),
     *         )
     *     )
     * )
     */
    public function actionCalc()
    {
        $model = new CalcForm();
        $model->setAttributes($this->get);
        if ($model->validate())
            return $model->calc();

        return $this->sendFailedResponse($model->getErrors(), 422);
    }

    //steps -----------------------------------------------
    /**
     * @OA\Post(
     *     path="/travel-step/step1",
     *     summary="create new travel or update travel which sended by key travel_uuid",
     *     tags={"TravelStepController"},
     *     @OA\Parameter (ref="#/components/parameters/language"),
     *     @OA\RequestBody(
     *         @OA\MediaType(
     *             mediaType="multipart/form-data",
     *             @OA\Schema(
     *                 required={"country_codes[]", "travel_purpose_id", "begin_date", "end_date", "birthdays[]", "program_id", "partner_id"},
     *                 @OA\Property (property="country_codes[]", type="array", @OA\Items(type="string", example="BE")),
     *                 @OA\Property (property="travel_purpose_id", type="integer", example=1),
     *                 @OA\Property (property="begin_date", type="string", example="25.10.2023"),
     *                 @OA\Property (property="end_date", type="string", example="31.11.2023"),
     *                 @OA\Property (property="has_covid", type="integer", example=0),
     *                 @OA\Property (property="is_family", type="integer", example=0),
     *                 @OA\Property (property="birthdays[]", type="array", @OA\Items(type="string", example="25.10.1998")),
     *                 @OA\Property (property="program_id", type="integer", example=4),
     *                 @OA\Property (property="partner_id", type="integer", example=1),
     *                 @OA\Property (property="travel_uuid", type="string", example="221cfb81-f098-4aa3-9f5e-564144fe6a58"),
     *             )
     *         )
     *     ),
     *
     *     @OA\Response(response="200", description="created or updated travel",
     *          @OA\JsonContent( type="object", ref="#/components/schemas/travel")
     *     ),
     *     @OA\Response(response="422", ref="#/components/responses/error_422"),
     *     @OA\Response(response="400", ref="#/components/responses/error_400"),
     * )
     */
    public function actionStep1()
    {
        $model = new Step1Form();
        $model->setAttributes($this->post);
        if ($model->validate())
            return $model->save()->getFullClientArr();

        return $this->sendFailedResponse($model->getErrors(), 422);
    }

    /**
     * @OA\Put(
     *     path="/travel-step/step2",
     *     summary="update travel which sended by key travel_uuid",
     *     tags={"TravelStepController"},
     *     security={ {"bearerAuth": {} } },
     *     @OA\Parameter (ref="#/components/parameters/language"),
     *     @OA\RequestBody(
     *         @OA\MediaType(
     *             mediaType="application/json",
     *             @OA\Schema(
     *                 required={"travel_uuid", "members"},
     *                 @OA\Property (property="travel_uuid", type="string", example="221cfb81-f098-4aa3-9f5e-564144fe6a58"),
     *                 @OA\Property (property="members", type="array", @OA\Items(type="object",
     *                       @OA\Property(property="id", type="integer", example=1),
     *                       @OA\Property(property="name", type="string|null", example="Ali"),
     *                       @OA\Property(property="passport_series", type="string|null", example="AA"),
     *                       @OA\Property(property="passport_number", type="string|null", example="7923838"),
     *                 )),
     *             )
     *         )
     *     ),
     *
     *     @OA\Response(response="200", description="created or updated travel",
     *          @OA\JsonContent( type="object", ref="#/components/schemas/travel")
     *     ),
     *     @OA\Response(response="422", ref="#/components/responses/error_422"),
     *     @OA\Response(response="400", ref="#/components/responses/error_400"),
     *     @OA\Response(response="401", ref="#/components/responses/error_401"),
     * )
     */
    public function actionStep2()
    {
        $model = new Step2Form();
        $model->setAttributes($this->put);
        if ($model->validate())
            return $model->save();

        return $this->sendFailedResponse($model->getErrors(), 422);
    }

    /**
     * @OA\Put(
     *     path="/travel-step/set-promo",
     *     summary="set promo to travel which sended by key travel_uuid",
     *     tags={"TravelStepController"},
     *     security={ {"bearerAuth": {} } },
     *     @OA\Parameter (ref="#/components/parameters/language"),
     *     @OA\RequestBody(
     *         @OA\MediaType(
     *             mediaType="application/json",
     *             @OA\Schema(
     *                 required={"travel_uuid", "members"},
     *                 @OA\Property (property="travel_uuid", type="string", example="221cfb81-f098-4aa3-9f5e-564144fe6a58"),
     *                 @OA\Property (property="promo_code", type="string", example="salom"),
     *             )
     *         )
     *     ),
     *
     *     @OA\Response(response="200", description="created or updated travel",
     *          @OA\JsonContent( type="object", ref="#/components/schemas/travel")
     *     ),
     *     @OA\Response(response="422", ref="#/components/responses/error_422"),
     *     @OA\Response(response="400", ref="#/components/responses/error_400"),
     *     @OA\Response(response="401", ref="#/components/responses/error_401"),
     * )
     */
    public function actionSetPromo()
    {
        $model = new SetPromoForm();
        $model->setAttributes($this->put);
        if ($model->validate())
            return $model->save()->getFullClientArr();

        return $this->sendFailedResponse($model->getErrors(), 422);
    }

    /**
     * @OA\Put(
     *     path="/travel-step/remove-promo",
     *     summary="remove promo from travel which sended by key travel_uuid",
     *     tags={"TravelStepController"},
     *     security={ {"bearerAuth": {} } },
     *     @OA\Parameter (ref="#/components/parameters/language"),
     *     @OA\RequestBody(
     *         @OA\MediaType(
     *             mediaType="application/json",
     *             @OA\Schema(
     *                 required={"travel_uuid"},
     *                 @OA\Property (property="travel_uuid", type="string", example="221cfb81-f098-4aa3-9f5e-564144fe6a58"),
     *             )
     *         )
     *     ),
     *
     *     @OA\Response(response="200", description="created or updated travel",
     *          @OA\JsonContent( type="object", ref="#/components/schemas/travel")
     *     ),
     *     @OA\Response(response="422", ref="#/components/responses/error_422"),
     *     @OA\Response(response="400", ref="#/components/responses/error_400"),
     *     @OA\Response(response="401", ref="#/components/responses/error_401"),
     * )
     */
    public function actionRemovePromo()
    {
        if (!array_key_exists('travel_uuid', $this->put))
            throw new BadRequestHttpException('travel_uuid is required');

        if (!$travel = Travel::find()
            ->andWhere(['not', ['promo_id' => null]])
            ->one()
        )
            throw new BadRequestHttpException('travel_uuid is incorrect');

        $promo = Promo::findOne($travel->promo_id);
        $promo->number = $promo->number + 1;
        $promo->save();

        $usd = Currency::getUsdRate();
        $travel->amount_uzs -= $travel->promo_amount;
        $travel->amount_usd -= round($travel->promo_amount / $usd, 2);
        $travel->promo_amount = 0;
        $travel->promo_percent = 0;
        $travel->promo_id = null;
        $travel->save();

        return $travel->getFullClientArr();
    }

    /**
     * @OA\Post(
     *     path="/travel-step/step3",
     *     summary="get checkout link",
     *     tags={"TravelStepController"},
     *     security={ {"bearerAuth": {} } },
     *     @OA\Parameter (ref="#/components/parameters/language"),
     *     @OA\RequestBody(
     *         @OA\MediaType(
     *             mediaType="application/json",
     *             @OA\Schema(
     *                 required={"travel_uuid", "payment_variant"},
     *                 @OA\Property (property="travel_uuid", type="string", example="221cfb81-f098-4aa3-9f5e-564144fe6a58"),
     *                 @OA\Property (property="payment_variant", type="integer", example=1, description="0 => payme, 1 => click"),
     *             )
     *         )
     *     ),
     *
     *     @OA\Response(response="200", description="created or updated travel",
     *          @OA\JsonContent( type="object", ref="#/components/schemas/travel")
     *     ),
     *     @OA\Response(response="422", ref="#/components/responses/error_422"),
     *     @OA\Response(response="400", ref="#/components/responses/error_400"),
     *     @OA\Response(response="401", ref="#/components/responses/error_401"),
     * )
     */
    public function actionStep3()
    {
        $model = new Step3Form();
        $model->setAttributes($this->put);
        if ($model->validate())
            return $model->send();

        return $this->sendFailedResponse($model->getErrors(), 422);
    }

    /**
     * @OA\Get(
     *     path="/travel-step/get-by-id",
     *     summary="get travel which is created current user by id",
     *     tags={"TravelStepController"},
     *     security={ {"bearerAuth": {} } },
     *     @OA\Parameter (ref="#/components/parameters/language"),
     *     @OA\Parameter (name="travel_uuid", in="query", @OA\Schema (type="string"), example="221cfb81-f098-4aa3-9f5e-564144fe6a58"),
     *     @OA\Response(
     *         response="200", description="travel object",
     *         @OA\JsonContent(type="object", ref="#/components/schemas/travel")
     *     ),
     *     @OA\Response(response="404", ref="#/components/responses/error_404"),
     * )
     */
    public function actionGetById()
    {
        $travel_uuid = "-1";
        if (array_key_exists('travel_uuid', $this->get))
            $travel_uuid = $this->get['travel_uuid'];

        $travel = Travel::findOne(['uuid' => $travel_uuid]);
        if ($travel == null)
            throw new NotFoundHttpException(Yii::t('app', 'Travel not found'));

        return $travel->getFullClientArr();
    }

    /**
     * @OA\Get(
     *     path="/travel-step/travels-of-user",
     *     summary="get travels which is created current user and payed, waiting policy, received policy status",
     *     tags={"TravelStepController"},
     *     security={ {"bearerAuth": {} } },
     *     @OA\Parameter (ref="#/components/parameters/language"),
     *     @OA\Response(
     *         response="200", description="travels",
     *      @OA\JsonContent(
     *         @OA\Property(property="models", type="array",  @OA\Items(type="object", ref="#/components/schemas/short_travel")),
     *         @OA\Property (property="pages", type="object", ref="#/components/schemas/pages")
     *      )
     *     ),
     *     @OA\Response(response="404", ref="#/components/responses/error_404"),
     * )
     */
    public function actionTravelsOfUser()
    {
        $searchModel = new TravelSearch();
        $dataProvider = $searchModel->search([
            'status' => [Travel::STATUSES['payed'], Travel::STATUSES['waiting_for_policy'], Travel::STATUSES['received_policy']],
            'f_user_id' => Yii::$app->user->id,
        ]);
        return [
            'models' => Travel::getShortClientArrCollection($dataProvider->getModels()),
            'pages' => $dataProvider->getPagination()
        ];
    }

    public function actionTest($id)
    {
        $travel = Travel::findOne($id);
        return $travel->saveAfterPayed();
    }
}